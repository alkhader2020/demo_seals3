"use client"

import { useState, useEffect } from "react"
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { ArrowLeft, Users, Trophy, TrendingUp, Download, BarChart3, Target, Award, BookOpen, FileText, MessageSquare, User } from "lucide-react"

// ÂÆö‰πâÁ±ªÂûãÊé•Âè£
interface TrainingRecord {
  id: string;
  title: string;
  date: string;
  duration: string;
  score: number;
  status: string;
  questions: number;
  correct?: number;
  feedback: string;
  attitude?: string;
  scenarios?: number;
}

interface Skills {
  product: number;
  communication: number;
  objection: number;
  closing: number;
}

interface RankingMember {
  rank: number;
  name: string;
  department: string;
  overallScore: number;
  completionRate: number;
  improvement: number;
  skills: Skills;
}

interface DepartmentStat {
  department: string;
  members: number;
  averageScore: number;
  completionRate: number;
  topSkill: string;
}

interface TeamOverview {
  totalMembers: number;
  averageScore: number;
  completionRate: number;
  topPerformer: string;
  trainingCount: number;
  highestScore: number;
  highestScoreDate: string;
  dialogueCount: number;
  dialogueAvgScore: number;
  rolePlayCount: number;
  rolePlayAvgScore: number;
}

interface TeamData {
  overview: TeamOverview;
  trainingRecords: TrainingRecord[];
  openTrainingRecords: TrainingRecord[];
  rankings: RankingMember[];
  departmentStats: DepartmentStat[];
}

interface TrainingData {
  type: string;
  time: string;
  points: number;
  accuracy: number;
  feedback: string;
}

export default function TeamAnalysisPage() {
  const [selectedTask, setSelectedTask] = useState<string>("all")
  const [showNotification, setShowNotification] = useState<boolean>(false)
  const [pointsAwarded, setPointsAwarded] = useState<number>(0)
  const [showTrainingNotification, setShowTrainingNotification] = useState<boolean>(false)
  const [trainingData, setTrainingData] = useState<TrainingData>({
    type: "ÈîÄÂîÆÂü∫Á°ÄÂüπËÆ≠ :ÈÄâÊã©È¢òËÆ≠ÁªÉ",
    time: "",
    points: 0,
    accuracy: 0,
    feedback: ""
  })

  // Ê®°ÊãüÂõ¢ÈòüÊï∞ÊçÆ
  const teamData: TeamData = {
    overview: {
      totalMembers: 15,
      averageScore: 82,
      completionRate: 87,
      topPerformer: "Âº†‰∏â",
      trainingCount: 24,
      highestScore: 92,
      highestScoreDate: "2023-10-15",
      dialogueCount: 8,
      dialogueAvgScore: 84,
      rolePlayCount: 6,
      rolePlayAvgScore: 86,
    },
    // ÂüπËÆ≠ËÆ∞ÂΩïÊï∞ÊçÆ
    trainingRecords: [
      {
        id: "1",
        title: "‰∫ßÂìÅÁü•ËØÜÈÄâÊã©È¢òËÆ≠ÁªÉ",
        date: "2023-10-15",
        duration: "30ÂàÜÈíü",
        score: 92,
        status: "Â∑≤ÂÆåÊàê",
        questions: 20,
        correct: 18,
        feedback: "‰∫ßÂìÅÁü•ËØÜÊéåÊè°‰ºòÁßÄÔºåÂØπÊñ∞‰∫ßÂìÅÁâπÊÄßÁêÜËß£ÈÄèÂΩªÔºåÁªßÁª≠‰øùÊåÅÔºÅ"
      },
      {
        id: "2",
        title: "ÈîÄÂîÆÊäÄÂ∑ßÈÄâÊã©È¢òËÆ≠ÁªÉ",
        date: "2023-10-10",
        duration: "25ÂàÜÈíü",
        score: 85,
        status: "Â∑≤ÂÆåÊàê",
        questions: 15,
        correct: 13,
        feedback: "ÈîÄÂîÆÊäÄÂ∑ßÊéåÊè°ËâØÂ•ΩÔºåÂª∫ËÆÆÂä†Âº∫ÂÆ¢Êà∑ÈúÄÊ±ÇÂàÜÊûêÊñπÈù¢ÁöÑËÆ≠ÁªÉ„ÄÇ"
      },
      {
        id: "3",
        title: "ÂÆ¢Êà∑Ê≤üÈÄöÈÄâÊã©È¢òËÆ≠ÁªÉ",
        date: "2023-10-05",
        duration: "35ÂàÜÈíü",
        score: 78,
        status: "Â∑≤ÂÆåÊàê",
        questions: 20,
        correct: 16,
        feedback: "Ê≤üÈÄöÂü∫Á°ÄÁü•ËØÜÊéåÊè°Â∞öÂèØÔºå‰ΩÜÂú®Â§ÑÁêÜÂ§çÊùÇÂÆ¢Êà∑Âú∫ÊôØÊñπÈù¢ÈúÄË¶ÅÊèêÂçá„ÄÇ"
      },
      {
        id: "4",
        title: "ÂºÇËÆÆÂ§ÑÁêÜÈÄâÊã©È¢òËÆ≠ÁªÉ",
        date: "2023-09-28",
        duration: "40ÂàÜÈíü",
        score: 88,
        status: "Â∑≤ÂÆåÊàê",
        questions: 25,
        correct: 22,
        feedback: "ÂºÇËÆÆÂ§ÑÁêÜËÉΩÂäõËæÉÂº∫ÔºåËÉΩÂ§üËØÜÂà´Â∏∏ËßÅÂÆ¢Êà∑ÂºÇËÆÆÂπ∂Êèê‰æõÊúâÊïàËß£ÂÜ≥ÊñπÊ°à„ÄÇ"
      }
    ],
    // ÂºÄÊîæÈóÆÁ≠îËÆ≠ÁªÉÊï∞ÊçÆ
    openTrainingRecords: [
      {
        id: "1",
        title: "‰∫ßÂìÅÁü•ËØÜÂºÄÊîæÈóÆÁ≠îËÆ≠ÁªÉ",
        date: "2023-10-12",
        duration: "45ÂàÜÈíü",
        score: 88,
        status: "Â∑≤ÂÆåÊàê",
        questions: 5,
        feedback: "‰∫ßÂìÅÁü•ËØÜÂõûÁ≠îÂÖ®Èù¢ÔºåÈÄªËæëÊ∏ÖÊô∞ÔºåÂØπ‰∫ßÂìÅ‰ºòÂäøÁöÑÈòêËø∞ÈùûÂ∏∏Âà∞‰Ωç„ÄÇÂª∫ËÆÆÂú®ÁªÜËäÇÊñπÈù¢Â§öÂä†ÂÖ≥Ê≥®„ÄÇ"
      },
      {
        id: "2",
        title: "ÈîÄÂîÆÂú∫ÊôØÂºÄÊîæÈóÆÁ≠îËÆ≠ÁªÉ",
        date: "2023-10-07",
        duration: "50ÂàÜÈíü",
        score: 82,
        status: "Â∑≤ÂÆåÊàê",
        questions: 4,
        feedback: "ÈîÄÂîÆÂú∫ÊôØÂàÜÊûêÂêàÁêÜÔºåËß£ÂÜ≥ÊñπÊ°àÂÖ∑ÊúâÂèØË°åÊÄß„ÄÇÂú®Â∫îÂØπÂ§çÊùÇÂÆ¢Êà∑ÈúÄÊ±ÇÊó∂ÂèØ‰ª•Êõ¥Âä†ÁÅµÊ¥ª„ÄÇ"
      },
      {
        id: "3",
        title: "ÂÆ¢Êà∑Ê≤üÈÄöÂºÄÊîæÈóÆÁ≠îËÆ≠ÁªÉ",
        date: "2023-10-02",
        duration: "40ÂàÜÈíü",
        score: 76,
        status: "Â∑≤ÂÆåÊàê",
        questions: 5,
        feedback: "Ê≤üÈÄöÁ≠ñÁï•Âü∫Êú¨Ê≠£Á°ÆÔºå‰ΩÜÂú®Â§ÑÁêÜÂÆ¢Êà∑ÂºÇËÆÆÊó∂ÁöÑÂõûÂ∫îÁï•ÊòæÁîüÁ°¨ÔºåÈúÄË¶ÅÊõ¥Âä†Ëá™ÁÑ∂ÊµÅÁïÖ„ÄÇ"
      },
      {
        id: "4",
        title: "ÈîÄÂîÆÊµÅÁ®ãÂºÄÊîæÈóÆÁ≠îËÆ≠ÁªÉ",
        date: "2023-09-25",
        duration: "55ÂàÜÈíü",
        score: 90,
        status: "Â∑≤ÂÆåÊàê",
        questions: 6,
        feedback: "ÈîÄÂîÆÊµÅÁ®ãÊéåÊè°ÁÜüÁªÉÔºåÂêÑÁéØËäÇË°îÊé•È°∫ÁïÖÔºåÂÆ¢Êà∑ÈúÄÊ±ÇÂàÜÊûêÊ∑±ÂÖ•ÔºåË°®Áé∞‰ºòÁßÄÔºÅ"
      }
    ],
    rankings: [
      {
        rank: 1,
        name: "Âº†‰∏â",
        department: "ÈîÄÂîÆ‰∏ÄÈÉ®",
        overallScore: 92,
        completionRate: 100,
        improvement: 18,
        skills: {
          product: 95,
          communication: 90,
          objection: 88,
          closing: 94,
        },
      },
      {
        rank: 2,
        name: "ÊùéÂõõ",
        department: "ÈîÄÂîÆ‰∫åÈÉ®",
        overallScore: 89,
        completionRate: 95,
        improvement: 15,
        skills: {
          product: 90,
          communication: 92,
          objection: 85,
          closing: 89,
        },
      },
      {
        rank: 3,
        name: "Áéã‰∫î",
        department: "ÈîÄÂîÆ‰∏ÄÈÉ®",
        overallScore: 86,
        completionRate: 90,
        improvement: 12,
        skills: {
          product: 88,
          communication: 85,
          objection: 90,
          closing: 81,
        },
      },
      {
        rank: 4,
        name: "ËµµÂÖ≠",
        department: "ÈîÄÂîÆ‰∏âÈÉ®",
        overallScore: 83,
        completionRate: 85,
        improvement: 10,
        skills: {
          product: 85,
          communication: 80,
          objection: 82,
          closing: 85,
        },
      },
      {
        rank: 5,
        name: "Èôà‰∏É",
        department: "ÈîÄÂîÆ‰∫åÈÉ®",
        overallScore: 79,
        completionRate: 80,
        improvement: 8,
        skills: {
          product: 82,
          communication: 78,
          objection: 75,
          closing: 81,
        },
      },
    ],
    departmentStats: [
      {
        department: "ÈîÄÂîÆ‰∏ÄÈÉ®",
        members: 6,
        averageScore: 85,
        completionRate: 92,
        topSkill: "‰∫ßÂìÅÁü•ËØÜ",
      },
      {
        department: "ÈîÄÂîÆ‰∫åÈÉ®",
        members: 5,
        averageScore: 83,
        completionRate: 88,
        topSkill: "Ê≤üÈÄöÊäÄÂ∑ß",
      },
      {
        department: "ÈîÄÂîÆ‰∏âÈÉ®",
        members: 4,
        averageScore: 80,
        completionRate: 85,
        topSkill: "ÂºÇËÆÆÂ§ÑÁêÜ",
      },
    ],
  }

  const getRankColor = (rank: number): string => {
    switch (rank) {
      case 1:
        return "text-yellow-600 bg-yellow-50"
      case 2:
        return "text-gray-600 bg-gray-50"
      case 3:
        return "text-orange-600 bg-orange-50"
      default:
        return "text-blue-600 bg-blue-50"
    }
  }

  // Â§ÑÁêÜÁßØÂàÜÈÄöÁü•
  const handleAwardPoints = (): void => {
    // ÈöèÊú∫ÁîüÊàêÁßØÂàÜÊï∞Èáè (5-20ÂàÜ)
    const points = Math.floor(Math.random() * 16) + 5;
    setPointsAwarded(points);
    setShowNotification(true);

    // 5ÁßíÂêéËá™Âä®ÂÖ≥Èó≠ÈÄöÁü•
    setTimeout(() => {
      setShowNotification(false);
    }, 5000);
  }

  // Â§ÑÁêÜËÆ≠ÁªÉÂÆåÊàêÈÄöÁü•
  const handleTrainingCompletion = (): void => {
    // ÁîüÊàêÂΩìÂâçÊó∂Èó¥
    const now = new Date();
    const timeString = `${now.getFullYear()}-${(now.getMonth() + 1).toString().padStart(2, '0')}-${now.getDate().toString().padStart(2, '0')} ${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;

    // ÈöèÊú∫ÁîüÊàêÊ≠£Á°ÆÁéá (60%-100%)
    const accuracy = Math.floor(Math.random() * 41) + 60;

    // Ê†πÊçÆÊ≠£Á°ÆÁéáÁîüÊàêÁßØÂàÜÂíåÂèçÈ¶à
    let points = 0;
    let feedback = "";

    if (accuracy >= 90) {
      points = 20;
      feedback = "Ë°®Áé∞‰ºòÁßÄÔºÅÊÇ®ÂØπÈîÄÂîÆÂü∫Á°ÄÁü•ËØÜÁöÑÊéåÊè°ÈùûÂ∏∏ÊâéÂÆûÔºåÁªßÁª≠‰øùÊåÅÔºÅ";
    } else if (accuracy >= 80) {
      points = 15;
      feedback = "Ë°®Áé∞ËâØÂ•ΩÔºÅÊÇ®ÂØπÂ§ßÈÉ®ÂàÜÈîÄÂîÆÂü∫Á°ÄÁü•ËØÜÊéåÊè°Âæó‰∏çÈîôÔºåÂèØ‰ª•ÂÜçÂä†Âº∫ËñÑÂº±ÁéØËäÇ„ÄÇ";
    } else if (accuracy >= 70) {
      points = 10;
      feedback = "Ë°®Áé∞‰∏ÄËà¨„ÄÇÂª∫ËÆÆÊÇ®Â§öÂ§ç‰π†ÈîÄÂîÆÂü∫Á°ÄÁü•ËØÜÔºåÂä†Âº∫ÁêÜËß£ÂíåËÆ∞ÂøÜ„ÄÇ";
    } else {
      points = 5;
      feedback = "ÈúÄË¶ÅÂä†Âº∫„ÄÇÂª∫ËÆÆÊÇ®ÈáçÊñ∞Â≠¶‰π†ÈîÄÂîÆÂü∫Á°ÄÁü•ËØÜÔºåÂ§öÂÅöÁªÉ‰π†ÊèêÈ´ò„ÄÇ";
    }

    setTrainingData({
      type: "ÈîÄÂîÆÂü∫Á°ÄÂüπËÆ≠ :ÈÄâÊã©È¢òËÆ≠ÁªÉ",
      time: timeString,
      points,
      accuracy,
      feedback
    });

    setShowTrainingNotification(true);

    // 10ÁßíÂêéËá™Âä®ÂÖ≥Èó≠ÈÄöÁü•
    setTimeout(() => {
      setShowTrainingNotification(false);
    }, 10000);
  }

  const getScoreColor = (score: number): string => {
    if (score >= 90) return "text-green-600"
    if (score >= 80) return "text-blue-600"
    if (score >= 70) return "text-yellow-600"
    return "text-red-600"
  }

  const getRankIcon = (rank: number): string => {
    switch (rank) {
      case 1:
        return "ü•á"
      case 2:
        return "ü•à"
      case 3:
        return "ü•â"
      default:
        return `#${rank}`
    }
  }

  // Ëé∑ÂèñËØÑ‰ª∑Á≠âÁ∫ß
  const getGradeLevel = (score: number): { text: string; color: string } => {
    if (score >= 90) return { text: "‰ºòÁßÄ", color: "text-green-600" }
    if (score >= 80) return { text: "ËâØÂ•Ω", color: "text-blue-600" }
    if (score >= 70) return { text: "‰∏≠Á≠â", color: "text-yellow-600" }
    return { text: "ÂæÖÊèêÈ´ò", color: "text-red-600" }
  }

  // È°µÈù¢Âä†ËΩΩÊó∂Ëß¶ÂèëÁßØÂàÜÈÄöÁü•
  useEffect(() => {
    handleAwardPoints();
  }, []);

  return (
    <div className="min-h-screen bg-background">
      {/* ÁßØÂàÜÈÄöÁü• */}
      {showNotification && (
        <div className="fixed top-4 right-4 z-50 bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded-lg shadow-lg flex items-center animate-fadeIn">
          <div className="mr-2">üéâ</div>
          <div>
            <p className="font-bold">ÊÅ≠ÂñúËé∑ÂæóÁßØÂàÜÔºÅ</p>
            <p className="text-sm">ÊÇ®Â∑≤Ëé∑Âæó {pointsAwarded} ÁßØÂàÜ</p>
          </div>
        </div>
      )}

      {/* ËÆ≠ÁªÉÂÆåÊàêÈÄöÁü• */}
      {showTrainingNotification && (
        <div className="fixed top-4 right-4 z-50 bg-blue-100 border border-blue-400 text-blue-800 px-4 py-3 rounded-lg shadow-lg animate-fadeIn max-w-md">
          <div className="flex items-start">
            <div className="mr-3 text-xl">üìä</div>
            <div>
              <p className="font-bold text-lg">ËÆ≠ÁªÉÂÆåÊàêÔºÅ</p>
              <div className="mt-2 space-y-1">
                <p><span className="font-medium">ËÆ≠ÁªÉÁ±ªÂûã:</span> {trainingData.type}</p>
                <p><span className="font-medium">ÂÆåÊàêÊó∂Èó¥:</span> {trainingData.time}</p>
                <p><span className="font-medium">Ëé∑ÂæóÁßØÂàÜ:</span> {trainingData.points} ÂàÜ</p>
                <p><span className="font-medium">Ê≠£Á°ÆÁéá:</span> {trainingData.accuracy}%</p>
              </div>
              <div className="mt-3 p-2 bg-blue-50 rounded">
                <p className="font-medium">ËØÑ‰ª∑ÂèçÈ¶à:</p>
                <p className="text-sm">{trainingData.feedback}</p>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Header */}
      <header className="border-b border-border bg-card">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center gap-4">
            <Link href="/">
              <Button variant="ghost" size="sm">
                <ArrowLeft className="w-4 h-4 mr-2" />
                ËøîÂõûÈ¶ñÈ°µ
              </Button>
            </Link>
            <h1 className="text-2xl font-bold text-foreground">üìä ‰∏™‰∫∫Êï∞ÊçÆ</h1>
            <Button
              onClick={handleTrainingCompletion}
              className="bg-blue-500 hover:bg-blue-600 text-white"
            >
              Ê®°ÊãüËÆ≠ÁªÉÂÆåÊàêÈÄöÁü•
            </Button>
          </div>
        </div>
      </header>

      <div className="container mx-auto px-4 py-6">
        {/* Filters */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
          <div>
            <label className="text-sm font-medium mb-2 block">‰ªªÂä°Á≠õÈÄâ</label>
            <Select value={selectedTask} onValueChange={setSelectedTask}>
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">ÂÖ®ÈÉ®‰ªªÂä°</SelectItem>
                <SelectItem value="choice">ÈÄâÊã©È¢òËÆ≠ÁªÉ</SelectItem>
                <SelectItem value="open">ÂºÄÊîæÈóÆÁ≠îËÆ≠ÁªÉ</SelectItem>
                <SelectItem value="dialogue">Ëá™Áî±ÂØπËØùÁªÉ‰π†</SelectItem>
                <SelectItem value="role">ÈîÄÂîÆËßíËâ≤ÂÆûËÆ≠</SelectItem>
              </SelectContent>
            </Select>
          </div>

          <div className="flex items-end">
            <Button variant="outline" className="w-full bg-transparent">
              <Download className="w-4 h-4 mr-2" />
              ÂØºÂá∫Êä•Âëä
            </Button>
          </div>
        </div>

        {/* Team Overview */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <Users className="w-8 h-8 text-primary" />
                <div>
                  <div className="text-2xl font-bold">{teamData.overview.trainingCount}</div>
                  <p className="text-sm text-muted-foreground">ËÆ≠ÁªÉÊ¨°Êï∞</p>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <BarChart3 className="w-8 h-8 text-blue-600" />
                <div>
                  <div className="text-2xl font-bold text-blue-600">{teamData.overview.averageScore}</div>
                  <p className="text-sm text-muted-foreground">Âπ≥ÂùáÂæóÂàÜ</p>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <Target className="w-8 h-8 text-green-600" />
                <div>
                  <div className="text-2xl font-bold text-green-600">{teamData.overview.completionRate}%</div>
                  <p className="text-sm text-muted-foreground">ÂÆåÊàêÁéá</p>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <Trophy className="w-8 h-8 text-yellow-600" />
                <div>
                  <div className="text-lg font-bold text-yellow-600">{teamData.overview.highestScore}</div>
                  <p className="text-sm text-muted-foreground">È´òÂæóÂàÜ</p>
                  <p className="text-xs text-muted-foreground">{teamData.overview.highestScoreDate}</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6">
          {/* Team Rankings / Training Records */}
          <div className="lg:col-span-3">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  {selectedTask === "choice" ? (
                    <>
                      <BookOpen className="w-5 h-5" />
                      ÈÄâÊã©È¢òËÆ≠ÁªÉËÆ∞ÂΩï
                    </>
                  ) : selectedTask === "open" ? (
                    <>
                      <FileText className="w-5 h-5" />
                      ÂºÄÊîæÈóÆÁ≠îËÆ≠ÁªÉËÆ∞ÂΩï
                    </>
                  ) : selectedTask === "dialogue" ? (
                    <>
                      <MessageSquare className="w-5 h-5" />
                      Ëá™Áî±ÂØπËØùÁªÉ‰π†ËÆ∞ÂΩï
                    </>
                  ) : selectedTask === "role" ? (
                    <>
                      <User className="w-5 h-5" />
                      ÈîÄÂîÆËßíËâ≤ÂÆûËÆ≠ËÆ∞ÂΩï
                    </>
                  ) : (
                    <>
                      <Award className="w-5 h-5" />
                      Âõ¢ÈòüÊéíÂêç
                    </>
                  )}
                </CardTitle>
              </CardHeader>
              <CardContent>
                {(selectedTask === "choice" || selectedTask === "open") ? (
                  // ÊòæÁ§∫ÂüπËÆ≠ËÆ∞ÂΩï
                  <div className="space-y-4">
                    {(selectedTask === "choice" ? teamData.trainingRecords : teamData.openTrainingRecords).map((record) => (
                      <div key={record.id} className="border rounded-lg p-4 hover:shadow-md transition-shadow">
                        <div className="flex items-center justify-between mb-3">
                          <div>
                            <h4 className="font-semibold">{record.title}</h4>
                            <p className="text-sm text-muted-foreground">{record.date} ¬∑ {record.duration}</p>
                          </div>
                          <div className="text-right">
                            <div className={`text-lg font-bold ${getScoreColor(record.score)}`}>
                              {record.score}
                            </div>
                            <p className="text-xs text-muted-foreground">ÂæóÂàÜ</p>
                          </div>
                        </div>

                        <div className="grid grid-cols-2 md:grid-cols-4 gap-3 text-sm">
                          <div className="text-center">
                            <div className="font-medium text-green-600">{record.status}</div>
                            <div className="text-muted-foreground">Áä∂ÊÄÅ</div>
                          </div>
                          <div className="text-center">
                            <div className="font-medium">{record.questions}È¢ò</div>
                            <div className="text-muted-foreground">ÈóÆÈ¢òÊï∞Èáè</div>
                          </div>
                          {selectedTask === "choice" && record.correct !== undefined ? (
                            <>
                              <div className="text-center">
                                <div className="font-medium">{record.correct}È¢ò</div>
                                <div className="text-muted-foreground">Ê≠£Á°ÆÊï∞</div>
                              </div>
                              <div className="text-center">
                                <div className="font-medium text-blue-600">
                                  {Math.round((record.correct / record.questions) * 100)}%
                                </div>
                                <div className="text-muted-foreground">Ê≠£Á°ÆÁéá</div>
                              </div>
                            </>
                          ) : (
                            <>
                              <div className="text-center">
                                <div className="font-medium">{record.date}</div>
                                <div className="text-muted-foreground">Êó∂Èó¥</div>
                              </div>
                              <div className="text-center">
                                <div className="font-medium">{record.attitude || "ÊäïÂÖ•"}</div>
                                <div className="text-muted-foreground">ÊÄÅÂ∫¶</div>
                              </div>
                            </>
                          )}
                        </div>

                        <div className="mt-3 pt-3 border-t">
                          <h5 className="text-sm font-medium mb-2">{selectedTask === "choice" ? "ËØÑ‰ª∑ÂèçÈ¶à" : "ÁªºÂêàËØÑ‰ª∑"}</h5>
                          <p className="text-sm text-muted-foreground">{record.feedback}</p>
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  // ÊòæÁ§∫Âõ¢ÈòüÊéíÂêç
                  <div className="space-y-4">
                    {teamData.rankings.map((member) => (
                      <div key={member.rank} className="border rounded-lg p-4 hover:shadow-md transition-shadow">
                        <div className="flex items-center justify-between mb-3">
                          <div className="flex items-center gap-3">
                            <div
                              className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold ${getRankColor(member.rank)}`}
                            >
                              {getRankIcon(member.rank)}
                            </div>
                            <div>
                              <h4 className="font-semibold">{member.name}</h4>
                              <p className="text-sm text-muted-foreground">{member.department}</p>
                            </div>
                          </div>
                          <div className="text-right">
                            <div className={`text-lg font-bold ${getScoreColor(member.overallScore)}`}>
                              {member.overallScore}
                            </div>
                            <p className="text-xs text-muted-foreground">ÁªºÂêàÂæóÂàÜ</p>
                          </div>
                        </div>

                        <div className="grid grid-cols-2 md:grid-cols-4 gap-3 text-sm">
                          <div className="text-center">
                            <div className="font-medium text-green-600">{member.completionRate}%</div>
                            <div className="text-muted-foreground">ÂÆåÊàêÁéá</div>
                          </div>
                          <div className="text-center">
                            <div className="font-medium text-blue-600">+{member.improvement}%</div>
                            <div className="text-muted-foreground">ÊèêÂçáÂπÖÂ∫¶</div>
                          </div>
                          <div className="text-center">
                            <div className="font-medium">{member.skills.product}</div>
                            <div className="text-muted-foreground">‰∫ßÂìÅÁü•ËØÜ</div>
                          </div>
                          <div className="text-center">
                            <div className="font-medium">{member.skills.communication}</div>
                            <div className="text-muted-foreground">Ê≤üÈÄöÊäÄÂ∑ß</div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  )
}